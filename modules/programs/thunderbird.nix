{ config, lib, pkgs, ... }:

with builtins;
with lib;

let

  cfg = config.programs.thunderbird;
  accounts = filter
    ({ value, ... }: value.thunderbird || value.profiles != [])
    (attrValues config.accounts.email.accounts);

  thunderbirdConfigPath = ".thunderbird";

  profilesPath = thunderbirdConfigPath;

  profiles = flip mapAttrs' cfg.profiles (_: profile:
    nameValuePair "Profile${toString profile.id}" {
      Name = profile.name;
      Path = profile.path;
      IsRelative = 1;
      Default = if profile.isDefault then 1 else 0;
    }) // {
      General = { StartWithLastProfile = 1; };
    };

  profilesIni = generators.toINI { } profiles;

  mkUserJs = prefs: extraPrefs: ''
    // Generated by Home Manager.

    ${concatStrings (mapAttrsToList (name: value: ''
      user_pref("${name}", ${builtins.toJSON value});
    '') prefs)}

    ${extraPrefs}
  '';

  mkAccountPrefs = let
    mkAccountPref = id: { name, userName, address, realName, smtp, imap, ... }: {
      # use exactly one server per account and reuse account key for server and identity
      "mail.account.account${id}.server" = "server${id}";
      "mail.account.account${id}.identities" = "id${id}";
      "mail.identity.id${id}.valid" = true;
      "mail.identity.id${id}.useremail" = address;
      "mail.identity.id${id}.fullName" = realName;
      "mail.identity.id${id}.smtpServer" = "smtp${id}";
      "mail.server.server${id}.type" = "imap";
      "mail.server.server${id}.name" = name;
      "mail.server.server${id}.userName" = userName;
      "mail.server.server${id}.hostname" = imap.host;
      #"mail.server.server${id}.login_at_startup" = true;
      "mail.server.server${id}.port" = imap.port;
      "mail.smtpserver.smtp${id}.description" = name;
      "mail.smtpserver.smtp${id}.username" = userName;
      "mail.smtpserver.smtp${id}.hostname" = smtp.host;
      "mail.smtpserver.smtp${id}.port" = smtp.port;
      "mail.smtpserver.smtp${id}.try_ssl" = 2;
      "mail.smtpserver.smtp${id}.authMethod" = 3;
    };
  in {}: null;

in {
  meta.maintainers = [ maintainers.chisui ];

  options = {
    accounts.email.accounts = mkOption {
      type = with types; attrsOf (submodule ({ config, lib, ... }: {
        options.thunderbird = {
          enable = mkEnableOption "Thunderbird";

          profile = mkOption {
            type = listOf str;
            default = [];
            description = ''
              the Thunderbird profiles this account should be added to.
              Each name has to correspond to an entry for `programs.thunderbird.profiles.<name>`.
              If present, this overrides `accounts.email.accounts.<name>.thunderbird.enable`.
              If absent and Thunderbird is enabled. This account will be added to the default profile.
            '';
          };

          filters = mkOption {
            type = functionTo (listOf (submodule import ./filter { inherit lib; }));
            default = [ ];
            description = ''
              Attribute set of mail filters. The Order in this list is the execution Order.
            '';
          };
        };
      }
      ));
    };
    
    programs.thunderbird = {
      enable = mkEnableOption "Thunderbird";

      package = mkOption {
        type = types.package;
        default = pkgs.thunderbird;
        defaultText = literalExample "pkgs.thunderbird";
        description = ''
          The Thunderbird package to use.
          this should be a wrapped Thunderbird package.
        '';
      };

      profiles = mkOption {
        type = with types; attrsOf (submodule ({ config, name, ... }: {
          name = mkOption {
            type = str;
            default = name;
            description = "Profile name.";
          };

          id = mkOption {
            type = ints.unsigned;
            default = 0;
            description = ''
              Profile ID. This should be set to a unique number per profile.
            '';
          };

          settings = mkOption {
            type = with types; attrsOf (either bool (either int str));
            default = { };
            example = literalExample ''
              {
                "browser.search.region" = "GB";
                "browser.search.isUS" = false;
                "general.useragent.locale" = "en-GB";
              }
            '';
            description = "Attribute set of Thunderbird preferences.";
          };

          extensions = mkOption {
            type = listOf package;
            default = [ ];
            example = literalExample ''
              with pkgs.nur.repos.chisui.thunderbird-addons; [
                TODO
              ]
            '';
            description = ''
              List of Thunderbird add-on packages to install for this profile. Some
              pre-packaged add-ons are accessible from NUR,
              <link xlink:href="https://github.com/nix-community/NUR"/>.
              Once you have NUR installed run

              <screen language="console">
                <prompt>$</prompt> <userinput>nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.chisui.thunderbird-addons</userinput>
              </screen>

              to list the available Thunderbird add-ons.

              </para><para>

              Note that it is necessary to manually enable these
              extensions inside Thunderbird after the first installation.

              </para><para>

              Extensions listed here will only be available in Firefox
              profiles managed through the
              <link linkend="opt-programs.thunderbird.profiles">programs.thunderbird.profiles</link>
              option. This is due to recent changes in the way Thunderbird
              handles extension side-loading.
            '';
          };

          extraConfig = mkOption {
            type = lines;
            default = "";
            description = ''
              Extra preferences to add to <filename>user.js</filename>.
            '';
          };

          userChrome = mkOption {
            type = lines;
            default = "";
            description = "Custom Thunderbird user chrome CSS.";
          };

          userContent = mkOption {
            type = lines;
            default = "";
            description = "Custom Thunderbird user content CSS.";
          };

          path = mkOption {
            type = str;
            default = name;
            description = "Profile path.";
          };

          isDefault = mkOption {
            type = bool;
            default = config.id == 0;
            defaultText = "true if profile ID is 0";
            description = "Whether this is a default profile.";
          };
        }));
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [ 
        (let
          defaults =
            catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
        in {
          assertion = cfg.profiles == { } || length defaults == 1;
          message = "Must have exactly one default Thunderbird profile but found "
            + toString (length defaults) + optionalString (length defaults > 1)
            (", namely " + concatStringsSep ", " defaults);
        })
        
        (let
          duplicates = filterAttrs (_: v: length v != 1) (zipAttrs
            (mapAttrsToList (n: v: { "${toString v.id}" = n; }) (cfg.profiles)));

          mkMsg = n: v: "  - ID ${n} is used by ${concatStringsSep ", " v}";
        in {
          assertion = duplicates == { };
          message = ''
            Must not have Thunderbird profiles with duplicate IDs but
          '' + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
        })
      ] ++ (
        let
          profileNames = catAttrs "name" (attrValues cfg.profiles);
        in map ({ name, profiles, ... }: 
          let
            missingProfiles = filter (p: elem p profileNames) profiles;
          in {
            assertion = length missingProfiles == 0;
            message = ''
              Accounts must be associated with defined profiles but ${concatStringSep ", " missingProfiles} do not exists.
            '';
          }) accounts
      );

    home.packages = [ cfg.package ];

    home.file = mkMerge ([{
      "${thunderbirdConfigPath}/profiles.ini" =
        mkIf (cfg.profiles != { }) { text = profilesIni; };
    }] ++ flatten (flip mapAttrsToList cfg.profiles (_: profile:
      let profilePath = "${profilesPath}/${profile.path}";
      in [{
        "${profilePath}/.keep".text = "";

        "${profilePath}/chrome/userChrome.css" =
          mkIf (profile.userChrome != "") { text = profile.userChrome; };

        "${profilePath}/chrome/userContent.css" =
          mkIf (profile.userContent != "") { text = profile.userContent; };

        "${profilePath}/user.js" =
          mkIf (profile.settings != { } || profile.extraConfig != "") {
            text = mkUserJs (profile.settings // (mkAccountPrefs profile)) profile.extraConfig;
          };

        "${profilePath}/extensions" = let
          extensionsEnvPkg = pkgs.buildEnv {
            name = "hm-thunderbird-extensions-${toString profile.id}";
            paths = profile.extensions;
          };
        in mkIf (profile.extensions != [ ]) {
          source = "${extensionsEnvPkg}/share/thunderbird/extensions";
          recursive = true;
          force = true;
        };
      }] ++ flip map accounts (account: {
          "${profilePath}/ImapMail/${account.smtp.host}/msgFilterRules.dat" =
            mkIf (builtins.hasAttr "filters" account) {
              text = mkFilters ({ inherit mail; } // account);
            };
        }))));
  };
}
