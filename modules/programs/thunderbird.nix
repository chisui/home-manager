{ config, lib, pkgs, ... }:

with lib;

let

  inherit (pkgs.stdenv.hostPlatform) isDarwin;

  cfg = config.programs.thunderbird;

  thunderbirdConfigPath =
    if isDarwin
    then "Library/Application Support/Thunderbird"
    else ".thunderbird";

  profilesPath = 
    if isDarwin
    then "${thunderbirdConfigPath}/Profiles"
    else thunderbirdConfigPath;

  profiles =
    flip mapAttrs' cfg.profiles (_: profile:
      nameValuePair "Profile${toString profile.id}" {
        Name = profile.name;
        Path =
          if isDarwin
          then "Profiles/${profile.path}"
          else profile.path;
        IsRelative = 1;
        Default = if profile.isDefault then 1 else 0;
      }
    ) // {
      General = {
        StartWithLastProfile = 1;
      };
    };

  profilesIni = generators.toINI {} profiles;

  mkUserJs = prefs: extraPrefs: ''
    // Generated by Home Manager.

    ${concatStrings (mapAttrsToList (name: value: ''
      user_pref("${name}", ${builtins.toJSON value});
    '') prefs)}

    ${extraPrefs}
  '';

in

{
  meta.maintainers = [ maintainers.chisui ];

  options = {
    programs.thunderbird = {
      enable = mkEnableOption "Thunderbird";

      package = mkOption {
        type = types.package;
        default = pkgs.thunderbird;
        defaultText = literalExample "pkgs.thunderbird";
        description = ''
          The Thunderbird package to use.
          this should be a wrapped Thunderbird package.
        '';
      };

      profiles = mkOption {
        type = types.attrsOf (types.submodule ({config, name, ...}: {
          options = {
            name = mkOption {
              type = types.str;
              default = name;
              description = "Profile name.";
            };

            id = mkOption {
              type = types.ints.unsigned;
              default = 0;
              description = ''
                Profile ID. This should be set to a unique number per profile.
              '';
            };

            settings = mkOption {
              type = with types; attrsOf (either bool (either int str));
              default = {};
              example = literalExample ''
                {
                  "browser.search.region" = "GB";
                  "browser.search.isUS" = false;
                  "general.useragent.locale" = "en-GB";
                }
              '';
              description = "Attribute set of Firefox preferences.";
            };

            extensions = mkOption {
              type = types.listOf types.package;
              default = [];
              example = literalExample ''
                with pkgs.nur.repos.chisui.thunderbird-addons; [
                  TODO
                ]
              '';
              description = ''
                List of Thunderbird add-on packages to install for this profile. Some
                pre-packaged add-ons are accessible from NUR,
                <link xlink:href="https://github.com/nix-community/NUR"/>.
                Once you have NUR installed run

                <screen language="console">
                  <prompt>$</prompt> <userinput>nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.chisui.thunderbird-addons</userinput>
                </screen>

                to list the available Thunderbird add-ons.

                </para><para>

                Note that it is necessary to manually enable these
                extensions inside Thunderbird after the first installation.

                </para><para>

                Extensions listed here will only be available in Firefox
                profiles managed through the
                <link linkend="opt-programs.thunderbird.profiles">programs.thunderbird.profiles</link>
                option. This is due to recent changes in the way Thunderbird
                handles extension side-loading.
              '';
            };

            extraConfig = mkOption {
              type = types.lines;
              default = "";
              description = ''
                Extra preferences to add to <filename>user.js</filename>.
              '';
            };

            userChrome = mkOption {
              type = types.lines;
              default = "";
              description = "Custom Thunderbird user chrome CSS.";
            };

            userContent = mkOption {
              type = types.lines;
              default = "";
              description = "Custom Thunderbird user content CSS.";
            };

            path = mkOption {
              type = types.str;
              default = name;
              description = "Profile path.";
            };

            isDefault = mkOption {
              type = types.bool;
              default = config.id == 0;
              defaultText = "true if profile ID is 0";
              description = "Whether this is a default profile.";
            };
          };
        }));
        default = {};
        description = "Attribute set of Thunderbird profiles.";
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      (
        let
          defaults =
            catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
        in {
          assertion = cfg.profiles == {} || length defaults == 1;
          message =
            "Must have exactly one default Thunderbird profile but found "
            + toString (length defaults)
            + optionalString (length defaults > 1)
                (", namely " + concatStringsSep ", " defaults);
        }
      )

      (
        let
          duplicates =
            filterAttrs (_: v: length v != 1)
            (zipAttrs
            (mapAttrsToList (n: v: { "${toString v.id}" = n; })
            (cfg.profiles)));

          mkMsg = n: v: "  - ID ${n} is used by ${concatStringsSep ", " v}";
        in {
          assertion = duplicates == {};
          message =
            "Must not have Thunderbird profiles with duplicate IDs but\n"
            + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
        }
      )
    ];

    home.packages = [ cfg.package ];

    home.file = mkMerge (
      [{
        "${thunderbirdConfigPath}/profiles.ini" = mkIf (cfg.profiles != {}) {
          text = profilesIni;
        };
      }]
      ++ flip mapAttrsToList cfg.profiles (_: profile: let
          profilePath = "${profilesPath}/${profile.path}";
        in {
          "${profilePath}/.keep".text = "";
        
          "${profilePath}/chrome/userChrome.css" =
            mkIf (profile.userChrome != "") {
              text = profile.userChrome;
            };

          "${profilePath}/chrome/userContent.css" =
            mkIf (profile.userContent != "") {
              text = profile.userContent;
            };

          "${profilePath}/user.js" =
            mkIf (profile.settings != {} || profile.extraConfig != "") {
              text = mkUserJs profile.settings profile.extraConfig;
            };

          "${profilePath}/extensions" = let
              extensionsEnvPkg = pkgs.buildEnv {
                name = "hm-thunderbird-extensions-${profile.id}";
                paths = profile.extensions;
              };
            in
              mkIf (profile.extensions != []) {
                source = "${extensionsEnvPkg}/share/thunderbird/extensions";
                recursive = true;
                force = true;
              };
        })
    );
  };
}
