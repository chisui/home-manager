{ config, lib, pkgs, ... }:

with builtins;
with lib;

let

  cfg = config.programs.thunderbird;
  accounts = filter
    (value: value.thunderbird.enable || value.profiles != [])
    (attrValues config.accounts.email.accounts);

  thunderbirdConfigPath = ".thunderbird";

  profilesPath = thunderbirdConfigPath;

  profiles = flip mapAttrs' cfg.profiles (_: profile:
    nameValuePair "Profile${toString profile.id}" {
      Name = profile.name;
      Path = profile.path;
      IsRelative = 1;
      Default = if profile.isDefault then 1 else 0;
    }) // {
      General = { StartWithLastProfile = 1; };
    };

  profilesIni = generators.toINI { } profiles;

  mkUserJs = let
      user_pref = name: value: ''user_pref("${name}", ${toJSON value});'';
      user_prefs = prefs: concatStringsSep "\n" (mapAttrsToList user_pref prefs);
    in prefs: accs: extraPrefs: ''
      /// Generated by Home Manager.

      // user prefs
      ${user_prefs prefs}

      // accounts
      ${user_prefs accs}

      // extraPrefs
      ${extraPrefs}

      /// End of Home Manager generated Part.
    '';

  mkAccountPrefs = let
    mkAccountPref = id: { name, userName, address, realName, smtp, imap, ... }: {
      # use exactly one server per account and reuse account key for server and identity
      "mail.account.account${id}.server" = "server${id}";
      "mail.account.account${id}.identities" = "id${id}";
      "mail.identity.id${id}.valid" = true;
      "mail.identity.id${id}.useremail" = address;
      "mail.identity.id${id}.fullName" = realName;
      "mail.identity.id${id}.smtpServer" = "smtp${id}";
      "mail.server.server${id}.type" = "imap";
      "mail.server.server${id}.name" = name;
      "mail.server.server${id}.userName" = userName;
      "mail.server.server${id}.hostname" = imap.host;
      #"mail.server.server${id}.login_at_startup" = true;
      "mail.server.server${id}.port" = imap.port;
      "mail.smtpserver.smtp${id}.description" = name;
      "mail.smtpserver.smtp${id}.username" = userName;
      "mail.smtpserver.smtp${id}.hostname" = smtp.host;
      "mail.smtpserver.smtp${id}.port" = smtp.port;
      "mail.smtpserver.smtp${id}.try_ssl" = 2;
      "mail.smtpserver.smtp${id}.authMethod" = 3;
    };
    mergeAll = foldAttrs (a: b: if b == null then a else abort "duplicate key for user.js") null;
  in accs: mergeAll (imap0 (i: mkAccountPref (toString i)) accs);

in {
  meta.maintainers = [ maintainers.chisui ];

  options = let

    accountModule = { config, ... }: {
      options.thunderbird = {
        enable = mkEnableOption "Thunderbird";

        profile = mkOption {
          type = types.listOf types.str;
          default = [];
          description = ''
            the Thunderbird profiles this account should be added to.
            Each name has to correspond to an entry for `programs.thunderbird.profiles.<name>`.
            If present, this overrides `accounts.email.accounts.<name>.thunderbird.enable`.
            If absent and Thunderbird is enabled. This account will be added to the default profile.
          '';
        };

        filters = mkOption {
          type = with types; functionTo (attrsOf (submodule (import ./filter { inherit lib; })));
          default = x: {};
          description = ''
            Attribute set of mail filters. The Order in this list is the execution Order.
          '';
        };
      };
    };

  in {
    accounts.email.accounts = mkOption {
      type = types.attrsOf (types.submodule accountModule);
    };
    
    programs.thunderbird = {
      enable = mkEnableOption "Thunderbird";

      package = mkOption {
        type = types.package;
        default = pkgs.thunderbird;
        defaultText = literalExample "pkgs.thunderbird";
        description = ''
          The Thunderbird package to use.
          this should be a wrapped Thunderbird package.
        '';
      };

      profiles = mkOption {
        type = types.attrsOf (types.submodule (import ./profiles.nix lib));
        default = { };
        description = ''
          profiles
        '';
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [ 
        (let
          defaults =
            catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
        in {
          assertion = cfg.profiles == { } || length defaults == 1;
          message = "Must have exactly one default Thunderbird profile but found "
            + toString (length defaults) + optionalString (length defaults > 1)
            (", namely " + concatStringsSep ", " defaults);
        })
        
        (let
          duplicates = filterAttrs (_: v: length v != 1) (zipAttrs
            (mapAttrsToList (n: v: { "${toString v.id}" = n; }) (cfg.profiles)));

          mkMsg = n: v: "  - ID ${n} is used by ${concatStringsSep ", " v}";
        in {
          assertion = duplicates == { };
          message = ''
            Must not have Thunderbird profiles with duplicate IDs but
          '' + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
        })
      ] ++ (
        let
          profileNames = catAttrs "name" (attrValues cfg.profiles);
        in map ({ name, profiles ? {}, ... }: 
          let
            missingProfiles = filter (p: elem p profileNames) (attrValues profiles);
          in {
            assertion = length missingProfiles == 0;
            message = ''
              Accounts must be associated with defined profiles but ${concatStringSep ", " missingProfiles} do not exists.
            '';
          }) accounts
      );

    home.packages = [ cfg.package ];

    home.file = let
        mkProfile = _: profile:
          let
            profilePath = "${profilesPath}/${profile.path}";
            profileAccounts = let
                pred = acc: if acc ? profiles
                          then elem profile.name acc.profiles
                          else profile.isDefault;
              in filter pred accounts;
            mkAccFilters = account: {
              "${profilePath}/ImapMail/${account.imap.host}/msgFilterRules.dat" = {
                text = (import ./filter/lib.nix { inherit lib; }).mkFilters account;
              };
            };
          in [{
            "${profilePath}/.keep".text = "";

            "${profilePath}/chrome/userChrome.css" =
              mkIf (profile.userChrome != "") { text = profile.userChrome; };

            "${profilePath}/chrome/userContent.css" =
              mkIf (profile.userContent != "") { text = profile.userContent; };

            "${profilePath}/user.js" = {
              text = mkUserJs
                        profile.settings
                        (mkAccountPrefs profileAccounts)
                        profile.extraConfig;
            };

            "${profilePath}/extensions" = let
              extensionsEnvPkg = pkgs.buildEnv {
                name = "hm-thunderbird-extensions-${toString profile.id}";
                paths = profile.extensions;
              };
            in mkIf (profile.extensions != [ ]) {
              source = "${extensionsEnvPkg}/share/thunderbird/extensions";
              recursive = true;
              force = true;
            };
          }] ++ (map mkAccFilters (filter (acc: acc ? thunderbird.filters) profileAccounts));
      in mkMerge ([{
        "${thunderbirdConfigPath}/profiles.ini" =
          mkIf (cfg.profiles != { }) { text = profilesIni; };
      }] ++ flatten (mapAttrsToList mkProfile cfg.profiles));
  };
}
