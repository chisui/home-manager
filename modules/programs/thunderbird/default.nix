{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.thunderbird;
  accnts = filter
    ({ value, ... }: value.thunderbird || value.profiles != [])
    (attrsOf config.accounts.email.accounts);

  thunderbirdConfigPath = ".thunderbird";

  profilesPath = thunderbirdConfigPath;

  profiles = flip mapAttrs' cfg.profiles (_: profile:
    nameValuePair "Profile${toString profile.id}" {
      Name = profile.name;
      Path = profile.path;
      IsRelative = 1;
      Default = if profile.isDefault then 1 else 0;
    }) // {
      General = { StartWithLastProfile = 1; };
    };

  profilesIni = generators.toINI { } profiles;

  mkUserJs = prefs: extraPrefs: ''
    // Generated by Home Manager.

    ${concatStrings (mapAttrsToList (name: value: ''
      user_pref("${name}", ${builtins.toJSON value});
    '') prefs)}

    ${extraPrefs}
  '';

in {
  meta.maintainers = [ maintainers.chisui ];

  options = {
    accounts.email.accounts = mkOption {
      type = with types; attrsOf (submodule ({ config, lib, ... }: {
        options.thunderbird = {
          enable = mkEnableOption "Thunderbird";

          profile = mkOption {
            type = listOf str;
            default = [];
            description = ''
              the Thunderbird profiles this account should be added to.
              Each name has to correspond to an entry for `programs.thunderbird.profiles.<name>`.
              If present, this overrides `accounts.email.accounts.<name>.thunderbird.enable`.
              If absent and Thunderbird is enabled. This account will be added to the default profile.
            '';
          };

          filters = mkOption {
            type = functionTo (listOf (submodule import ./filter { inherit lib; }));
            default = [ ];
            description = ''
              Attribute set of mail filters. The Order in this list is the execution Order.
            '';
          };
        };
      }
      ));
    };
    
    programs.thunderbird = {
      enable = mkEnableOption "Thunderbird";

      package = mkOption {
        type = types.package;
        default = pkgs.thunderbird;
        defaultText = literalExample "pkgs.thunderbird";
        description = ''
          The Thunderbird package to use.
          this should be a wrapped Thunderbird package.
        '';
      };

      profiles = mkOption {
        type = with types; attrsOf (submodule (import ./profile.nix { inherit lib; }));
        default = { };
        description = "Attribute set of Thunderbird profiles.";
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      (let
        defaults =
          catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
      in {
        assertion = cfg.profiles == { } || length defaults == 1;
        message = "Must have exactly one default Thunderbird profile but found "
          + toString (length defaults) + optionalString (length defaults > 1)
          (", namely " + concatStringsSep ", " defaults);
      })

      (let
        duplicates = filterAttrs (_: v: length v != 1) (zipAttrs
          (mapAttrsToList (n: v: { "${toString v.id}" = n; }) (cfg.profiles)));

        mkMsg = n: v: "  - ID ${n} is used by ${concatStringsSep ", " v}";
      in {
        assertion = duplicates == { };
        message = ''
          Must not have Thunderbird profiles with duplicate IDs but
        '' + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
      })
    ];

    home.packages = [ cfg.package ];

    home.file = mkMerge ([{
      "${thunderbirdConfigPath}/profiles.ini" =
        mkIf (cfg.profiles != { }) { text = profilesIni; };
    }] ++ flatten (flip mapAttrsToList cfg.profiles (_: profile:
      let profilePath = "${profilesPath}/${profile.path}";
      in [{
        "${profilePath}/.keep".text = "";

        "${profilePath}/chrome/userChrome.css" =
          mkIf (profile.userChrome != "") { text = profile.userChrome; };

        "${profilePath}/chrome/userContent.css" =
          mkIf (profile.userContent != "") { text = profile.userContent; };

        "${profilePath}/user.js" =
          mkIf (profile.settings != { } || profile.extraConfig != "") {
            text = mkUserJs profile.settings profile.extraConfig;
          };

        "${profilePath}/extensions" = let
          extensionsEnvPkg = pkgs.buildEnv {
            name = "hm-thunderbird-extensions-${toString profile.id}";
            paths = profile.extensions;
          };
        in mkIf (profile.extensions != [ ]) {
          source = "${extensionsEnvPkg}/share/thunderbird/extensions";
          recursive = true;
          force = true;
        };
      }] ++ flip mapAttrsToList profile.accounts (mail: account: {
          "${profilePaht}/ImapMail/${account.host}/msgFilterRules.dat" =
            mkIf (builtins.hasAttr "filters" account) {
              text = mkFilters ({ inherit mail; } // account);
            };
        }))));
  };
}
